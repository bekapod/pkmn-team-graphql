scalar Time

type Query {
  abilityById(id: ID!): Ability
  abilities: AbilityConnection!
  moveById(id: ID!): Move
  moves: MoveConnection!
  pokemonById(id: ID!): Pokemon
  pokemon: PokemonConnection!
  teamById(id: ID!): Team
  teams: TeamConnection!
  typeById(id: ID!): Type
  types: TypeConnection!
}

type Mutation {
  createTeam(input: CreateTeamInput!): Team!
  updateTeam(input: UpdateTeamInput!): Team!
  updateTeamMember(input: UpdateTeamMemberInput!): TeamMember!
  deleteTeams(ids: [ID!]!): [Team!]!
  deleteTeamMembers(ids: [ID!]!): [TeamMember!]!
  deleteTeamMemberMoves(ids: [ID!]!): [Move!]!
}

input CreateTeamInput {
  name: String!
  members: [CreateTeamMemberInput!]
}

input UpdateTeamInput {
  id: ID!
  name: String
  members: [CreateOrUpdateTeamMemberInput!]
}

input CreateTeamMemberInput {
  pokemonId: ID!
  slot: Int!
}

input CreateOrUpdateTeamMemberInput {
  id: ID
  pokemonId: ID
  slot: Int
}

input UpdateTeamMemberInput {
  id: ID!
  pokemonId: ID
  slot: Int
  moves: [CreateOrUpdateTeamMemberMoveInput!]
}

input CreateOrUpdateTeamMemberMoveInput {
  id: ID
  pokemonMoveId: ID
  slot: Int
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pokemon implements Node {
  id: ID!
  name: String!
  slug: String!
  pokedexId: Int!
  sprite: String!
  hp: Int!
  attack: Int!
  defense: Int!
  specialAttack: Int!
  specialDefense: Int!
  speed: Int!
  isBaby: Boolean!
  isLegendary: Boolean!
  isMythical: Boolean!
  description: String
  color: Color!
  shape: Shape!
  habitat: Habitat
  height: Int!
  weight: Int!
  isDefaultVariant: Boolean!
  genus: String!
  abilities: PokemonAbilityConnection!
  types: PokemonTypeConnection!
  moves: PokemonMoveConnection!
  eggGroups: EggGroupConnection!
  evolvesTo: PokemonEvolutionConnection!
  evolvesFrom: PokemonEvolutionConnection!
}

type PokemonConnection {
  edges: [PokemonEdge]
  pageInfo: PageInfo!
}

type PokemonEdge {
  cursor: String!
  node: Pokemon
}

type PokemonAbilityConnection {
  edges: [PokemonAbilityEdge]
  pageInfo: PageInfo!
}

type PokemonAbilityEdge {
  cursor: String!
  slot: Int
  isHidden: Boolean
  node: Ability
}

type PokemonWithAbilityConnection {
  edges: [PokemonWithAbilityEdge]
  pageInfo: PageInfo!
}

type PokemonWithAbilityEdge {
  cursor: String!
  slot: Int
  isHidden: Boolean
  node: Pokemon
}

type PokemonEvolutionConnection {
  edges: [PokemonEvolutionEdge]
  pageInfo: PageInfo!
}

type PokemonEvolutionEdge {
  cursor: String!
  node: PokemonEvolution
}

type PokemonEvolution implements Node {
  id: ID!
  pokemon: Pokemon!
  trigger: EvolutionTrigger!
  item: Item
  gender: Gender!
  heldItem: Item
  knownMove: Move
  knownMoveType: Type
  minLevel: Int
  minHappiness: Int
  minBeauty: Int
  minAffection: Int
  needsOverworldRain: Boolean!
  partyPokemon: Pokemon
  partyPokemonType: Type
  relativePhysicalStats: Int
  timeOfDay: TimeOfDay!
  tradeWithPokemon: Pokemon
  turnUpsideDown: Boolean!
  spin: Boolean!
  takeDamage: Int
  criticalHits: Int
}

type PokemonMoveConnection {
  edges: [PokemonMoveEdge]
  pageInfo: PageInfo!
}

type PokemonMoveEdge {
  cursor: String!
  node: Move
  learnMethod: MoveLearnMethod
  levelLearnedAt: Int
}

type PokemonWithMoveConnection {
  edges: [PokemonWithMoveEdge]
  pageInfo: PageInfo!
}

type PokemonWithMoveEdge {
  cursor: String!
  node: Pokemon
  learnMethod: MoveLearnMethod
  levelLearnedAt: Int
}

type PokemonTypeConnection {
  edges: [PokemonTypeEdge]
  pageInfo: PageInfo!
}

type PokemonTypeEdge {
  cursor: String!
  node: Type
  slot: Int
}

type PokemonWithTypeConnection {
  edges: [PokemonWithTypeEdge]
  pageInfo: PageInfo!
}

type PokemonWithTypeEdge {
  cursor: String!
  node: Pokemon
  slot: Int
}

type AbilityConnection {
  edges: [AbilityEdge]
  pageInfo: PageInfo!
}

type AbilityEdge {
  cursor: String!
  node: Ability
}

type Ability implements Node {
  id: ID!
  slug: String!
  name: String!
  effect: String
  pokemon: PokemonWithAbilityConnection!
}

type EggGroupConnection {
  edges: [EggGroupEdge]
  pageInfo: PageInfo!
}

type EggGroupEdge {
  cursor: String!
  node: EggGroup
}

type EggGroup implements Node {
  id: ID!
  name: String!
  slug: String!
}

type Item implements Node {
  id: ID!
  slug: String!
  name: String!
  cost: Int
  flingPower: Int
  flingEffect: String
  effect: String
  sprite: String
  category: ItemCategory!
  attributes: [ItemAttribute!]!
}

type MoveConnection {
  edges: [MoveEdge]
  pageInfo: PageInfo!
}

type MoveEdge {
  cursor: String!
  node: Move
}

type Move implements Node {
  id: ID!
  slug: String!
  name: String!
  accuracy: Int
  pp: Int
  power: Int
  damageClass: DamageClass!
  effect: String
  effectChance: Int
  target: MoveTarget!
  type: Type!
  pokemon: PokemonWithMoveConnection!
}

type TeamConnection {
  edges: [TeamEdge]
  pageInfo: PageInfo!
}

type TeamEdge {
  cursor: String!
  node: Team
}

type Team implements Node {
  id: ID!
  name: String!
  createdAt: Time!
  updatedAt: Time!
  members: TeamMemberConnection!
}

type TeamMemberConnection {
  edges: [TeamMemberEdge]
  pageInfo: PageInfo!
}

type TeamMemberEdge {
  cursor: String!
  node: TeamMember
  slot: Int
}

type TeamMember implements Node {
  id: ID!
  pokemon: Pokemon!
  moves: TeamMemberMoveConnection!
}

type TeamMemberMoveConnection {
  edges: [TeamMemberMoveEdge]
  pageInfo: PageInfo!
}

type TeamMemberMoveEdge {
  cursor: String!
  node: Move
  slot: Int
  learnMethod: MoveLearnMethod
  levelLearnedAt: Int
}

type TypeConnection {
  edges: [TypeEdge]
  pageInfo: PageInfo!
}

type TypeEdge {
  cursor: String!
  node: Type
}

type Type implements Node {
  id: ID!
  slug: String!
  name: String!
  pokemon: PokemonWithTypeConnection!
  moves: MoveConnection!
  noDamageTo: TypeConnection!
  halfDamageTo: TypeConnection!
  doubleDamageTo: TypeConnection!
  noDamageFrom: TypeConnection!
  halfDamageFrom: TypeConnection!
  doubleDamageFrom: TypeConnection!
}

enum Color {
  BLACK
  BLUE
  BROWN
  GRAY
  GREEN
  PINK
  PURPLE
  RED
  WHITE
  YELLOW
}

enum DamageClass {
  PHYSICAL
  SPECIAL
  STATUS
}

enum EvolutionTrigger {
  LEVEL_UP
  OTHER
  SHED
  TRADE
  USE_ITEM
}

enum Gender {
  MALE
  FEMALE
  ANY
}

enum Habitat {
  CAVE
  FOREST
  GRASSLAND
  MOUNTAIN
  RARE
  ROUGH_TERRAIN
  SEA
  URBAN
  WATERS_EDGE
}

enum ItemCategory {
  ALL_MACHINES
  ALL_MAIL
  APRICORN_BALLS
  APRICORN_BOX
  BAD_HELD_ITEMS
  BAKING_ONLY
  CHOICE
  COLLECTIBLES
  DATA_CARDS
  DEX_COMPLETION
  EFFORT_DROP
  EFFORT_TRAINING
  EVENT_ITEMS
  EVOLUTION
  FLUTES
  GAMEPLAY
  HEALING
  HELD_ITEMS
  IN_A_PINCH
  JEWELS
  LOOT
  MEDICINE
  MEGA_STONES
  MEMORIES
  MIRACLE_SHOOTER
  MULCH
  OTHER
  PICKY_HEALING
  PLATES
  PLOT_ADVANCEMENT
  PP_RECOVERY
  REVIVAL
  SCARVES
  SPECIAL_BALLS
  SPECIES_SPECIFIC
  SPELUNKING
  STANDARD_BALLS
  STAT_BOOSTS
  STATUS_CURES
  TRAINING
  TYPE_ENHANCEMENT
  TYPE_PROTECTION
  UNUSED
  VITAMINS
  Z_CRYSTALS
}

enum ItemAttribute {
  CONSUMABLE
  COUNTABLE
  HOLDABLE
  HOLDABLE_ACTIVE
  HOLDABLE_PASSIVE
  UNDERGROUND
  USABLE_IN_BATTLE
  USABLE_OVERWORLD
}

enum MoveLearnMethod {
  LEVEL_UP
  EGG
  TUTOR
  MACHINE
  STADIUM_SURFING_PIKACHU
  LIGHT_BALL_EGG
  COLOSSEUM_PURIFICATION
  XD_SHADOW
  XD_PURIFICATION
  FORM_CHANGE
  RECORD
  TRANSFER
}

enum MoveTarget {
  SPECIFIC_MOVE
  SELECTED_POKEMON_ME_FIRST
  ALLY
  USERS_FIELD
  USER_OR_ALLY
  OPPONENTS_FIELD
  USER
  RANDOM_OPPONENT
  ALL_OTHER_POKEMON
  SELECTED_POKEMON
  ALL_OPPONENTS
  ENTIRE_FIELD
  USER_AND_ALLIES
  ALL_POKEMON
  ALL_ALLIES
}

enum Shape {
  BALL
  SQUIGGLE
  FISH
  ARMS
  BLOB
  UPRIGHT
  LEGS
  QUADRUPED
  WINGS
  TENTACLES
  HEADS
  HUMANOID
  BUG_WINGS
  ARMOR
}

enum TimeOfDay {
  DAY
  NIGHT
  ANY
}
