// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AbilityList struct {
	Total     int        `json:"total"`
	Abilities []*Ability `json:"abilities"`
}

type EggGroup struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
}

type EggGroupList struct {
	Total     int         `json:"total"`
	EggGroups []*EggGroup `json:"eggGroups"`
}

type Item struct {
	ID          string          `json:"id"`
	Slug        string          `json:"slug"`
	Name        string          `json:"name"`
	Cost        *int            `json:"cost"`
	FlingPower  *int            `json:"flingPower"`
	FlingEffect *string         `json:"flingEffect"`
	Effect      *string         `json:"effect"`
	Sprite      *string         `json:"sprite"`
	Category    ItemCategory    `json:"category"`
	Attributes  []ItemAttribute `json:"attributes"`
}

type MoveList struct {
	Total int     `json:"total"`
	Moves []*Move `json:"moves"`
}

type PokemonAbilityList struct {
	Total            int               `json:"total"`
	PokemonAbilities []*PokemonAbility `json:"pokemonAbilities"`
}

type PokemonEvolutionList struct {
	Total             int                 `json:"total"`
	PokemonEvolutions []*PokemonEvolution `json:"pokemonEvolutions"`
}

type PokemonList struct {
	Total   int        `json:"total"`
	Pokemon []*Pokemon `json:"pokemon"`
}

type PokemonMoveList struct {
	Total        int            `json:"total"`
	PokemonMoves []*PokemonMove `json:"pokemonMoves"`
}

type PokemonTypeList struct {
	Total        int            `json:"total"`
	PokemonTypes []*PokemonType `json:"pokemonTypes"`
}

type TypeList struct {
	Total int     `json:"total"`
	Types []*Type `json:"types"`
}

type Color string

const (
	ColorBlack  Color = "BLACK"
	ColorBlue   Color = "BLUE"
	ColorBrown  Color = "BROWN"
	ColorGray   Color = "GRAY"
	ColorGreen  Color = "GREEN"
	ColorPink   Color = "PINK"
	ColorPurple Color = "PURPLE"
	ColorRed    Color = "RED"
	ColorWhite  Color = "WHITE"
	ColorYellow Color = "YELLOW"
)

var AllColor = []Color{
	ColorBlack,
	ColorBlue,
	ColorBrown,
	ColorGray,
	ColorGreen,
	ColorPink,
	ColorPurple,
	ColorRed,
	ColorWhite,
	ColorYellow,
}

func (e Color) IsValid() bool {
	switch e {
	case ColorBlack, ColorBlue, ColorBrown, ColorGray, ColorGreen, ColorPink, ColorPurple, ColorRed, ColorWhite, ColorYellow:
		return true
	}
	return false
}

func (e Color) String() string {
	return string(e)
}

func (e *Color) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Color(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Color", str)
	}
	return nil
}

func (e Color) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DamageClass string

const (
	DamageClassPhysical DamageClass = "PHYSICAL"
	DamageClassSpecial  DamageClass = "SPECIAL"
	DamageClassStatus   DamageClass = "STATUS"
)

var AllDamageClass = []DamageClass{
	DamageClassPhysical,
	DamageClassSpecial,
	DamageClassStatus,
}

func (e DamageClass) IsValid() bool {
	switch e {
	case DamageClassPhysical, DamageClassSpecial, DamageClassStatus:
		return true
	}
	return false
}

func (e DamageClass) String() string {
	return string(e)
}

func (e *DamageClass) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DamageClass(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DamageClass", str)
	}
	return nil
}

func (e DamageClass) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EvolutionTrigger string

const (
	EvolutionTriggerLevelUp EvolutionTrigger = "LEVEL_UP"
	EvolutionTriggerOther   EvolutionTrigger = "OTHER"
	EvolutionTriggerShed    EvolutionTrigger = "SHED"
	EvolutionTriggerTrade   EvolutionTrigger = "TRADE"
	EvolutionTriggerUseItem EvolutionTrigger = "USE_ITEM"
)

var AllEvolutionTrigger = []EvolutionTrigger{
	EvolutionTriggerLevelUp,
	EvolutionTriggerOther,
	EvolutionTriggerShed,
	EvolutionTriggerTrade,
	EvolutionTriggerUseItem,
}

func (e EvolutionTrigger) IsValid() bool {
	switch e {
	case EvolutionTriggerLevelUp, EvolutionTriggerOther, EvolutionTriggerShed, EvolutionTriggerTrade, EvolutionTriggerUseItem:
		return true
	}
	return false
}

func (e EvolutionTrigger) String() string {
	return string(e)
}

func (e *EvolutionTrigger) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EvolutionTrigger(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EvolutionTrigger", str)
	}
	return nil
}

func (e EvolutionTrigger) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
	GenderAny    Gender = "ANY"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderAny,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderAny:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Habitat string

const (
	HabitatCave         Habitat = "CAVE"
	HabitatForest       Habitat = "FOREST"
	HabitatGrassland    Habitat = "GRASSLAND"
	HabitatMountain     Habitat = "MOUNTAIN"
	HabitatRare         Habitat = "RARE"
	HabitatRoughTerrain Habitat = "ROUGH_TERRAIN"
	HabitatSea          Habitat = "SEA"
	HabitatUrban        Habitat = "URBAN"
	HabitatWatersEdge   Habitat = "WATERS_EDGE"
)

var AllHabitat = []Habitat{
	HabitatCave,
	HabitatForest,
	HabitatGrassland,
	HabitatMountain,
	HabitatRare,
	HabitatRoughTerrain,
	HabitatSea,
	HabitatUrban,
	HabitatWatersEdge,
}

func (e Habitat) IsValid() bool {
	switch e {
	case HabitatCave, HabitatForest, HabitatGrassland, HabitatMountain, HabitatRare, HabitatRoughTerrain, HabitatSea, HabitatUrban, HabitatWatersEdge:
		return true
	}
	return false
}

func (e Habitat) String() string {
	return string(e)
}

func (e *Habitat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Habitat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Habitat", str)
	}
	return nil
}

func (e Habitat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ItemAttribute string

const (
	ItemAttributeConsumable      ItemAttribute = "CONSUMABLE"
	ItemAttributeCountable       ItemAttribute = "COUNTABLE"
	ItemAttributeHoldable        ItemAttribute = "HOLDABLE"
	ItemAttributeHoldableActive  ItemAttribute = "HOLDABLE_ACTIVE"
	ItemAttributeHoldablePassive ItemAttribute = "HOLDABLE_PASSIVE"
	ItemAttributeUnderground     ItemAttribute = "UNDERGROUND"
	ItemAttributeUsableInBattle  ItemAttribute = "USABLE_IN_BATTLE"
	ItemAttributeUsableOverworld ItemAttribute = "USABLE_OVERWORLD"
)

var AllItemAttribute = []ItemAttribute{
	ItemAttributeConsumable,
	ItemAttributeCountable,
	ItemAttributeHoldable,
	ItemAttributeHoldableActive,
	ItemAttributeHoldablePassive,
	ItemAttributeUnderground,
	ItemAttributeUsableInBattle,
	ItemAttributeUsableOverworld,
}

func (e ItemAttribute) IsValid() bool {
	switch e {
	case ItemAttributeConsumable, ItemAttributeCountable, ItemAttributeHoldable, ItemAttributeHoldableActive, ItemAttributeHoldablePassive, ItemAttributeUnderground, ItemAttributeUsableInBattle, ItemAttributeUsableOverworld:
		return true
	}
	return false
}

func (e ItemAttribute) String() string {
	return string(e)
}

func (e *ItemAttribute) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemAttribute(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemAttribute", str)
	}
	return nil
}

func (e ItemAttribute) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ItemCategory string

const (
	ItemCategoryAllMachines     ItemCategory = "ALL_MACHINES"
	ItemCategoryAllMail         ItemCategory = "ALL_MAIL"
	ItemCategoryApricornBalls   ItemCategory = "APRICORN_BALLS"
	ItemCategoryApricornBox     ItemCategory = "APRICORN_BOX"
	ItemCategoryBadHeldItems    ItemCategory = "BAD_HELD_ITEMS"
	ItemCategoryBakingOnly      ItemCategory = "BAKING_ONLY"
	ItemCategoryChoice          ItemCategory = "CHOICE"
	ItemCategoryCollectibles    ItemCategory = "COLLECTIBLES"
	ItemCategoryDataCards       ItemCategory = "DATA_CARDS"
	ItemCategoryDexCompletion   ItemCategory = "DEX_COMPLETION"
	ItemCategoryEffortDrop      ItemCategory = "EFFORT_DROP"
	ItemCategoryEffortTraining  ItemCategory = "EFFORT_TRAINING"
	ItemCategoryEventItems      ItemCategory = "EVENT_ITEMS"
	ItemCategoryEvolution       ItemCategory = "EVOLUTION"
	ItemCategoryFlutes          ItemCategory = "FLUTES"
	ItemCategoryGameplay        ItemCategory = "GAMEPLAY"
	ItemCategoryHealing         ItemCategory = "HEALING"
	ItemCategoryHeldItems       ItemCategory = "HELD_ITEMS"
	ItemCategoryInAPinch        ItemCategory = "IN_A_PINCH"
	ItemCategoryJewels          ItemCategory = "JEWELS"
	ItemCategoryLoot            ItemCategory = "LOOT"
	ItemCategoryMedicine        ItemCategory = "MEDICINE"
	ItemCategoryMegaStones      ItemCategory = "MEGA_STONES"
	ItemCategoryMemories        ItemCategory = "MEMORIES"
	ItemCategoryMiracleShooter  ItemCategory = "MIRACLE_SHOOTER"
	ItemCategoryMulch           ItemCategory = "MULCH"
	ItemCategoryOther           ItemCategory = "OTHER"
	ItemCategoryPickyHealing    ItemCategory = "PICKY_HEALING"
	ItemCategoryPlates          ItemCategory = "PLATES"
	ItemCategoryPlotAdvancement ItemCategory = "PLOT_ADVANCEMENT"
	ItemCategoryPpRecovery      ItemCategory = "PP_RECOVERY"
	ItemCategoryRevival         ItemCategory = "REVIVAL"
	ItemCategoryScarves         ItemCategory = "SCARVES"
	ItemCategorySpecialBalls    ItemCategory = "SPECIAL_BALLS"
	ItemCategorySpeciesSpecific ItemCategory = "SPECIES_SPECIFIC"
	ItemCategorySpelunking      ItemCategory = "SPELUNKING"
	ItemCategoryStandardBalls   ItemCategory = "STANDARD_BALLS"
	ItemCategoryStatBoosts      ItemCategory = "STAT_BOOSTS"
	ItemCategoryStatusCures     ItemCategory = "STATUS_CURES"
	ItemCategoryTraining        ItemCategory = "TRAINING"
	ItemCategoryTypeEnhancement ItemCategory = "TYPE_ENHANCEMENT"
	ItemCategoryTypeProtection  ItemCategory = "TYPE_PROTECTION"
	ItemCategoryUnused          ItemCategory = "UNUSED"
	ItemCategoryVitamins        ItemCategory = "VITAMINS"
	ItemCategoryZCrystals       ItemCategory = "Z_CRYSTALS"
)

var AllItemCategory = []ItemCategory{
	ItemCategoryAllMachines,
	ItemCategoryAllMail,
	ItemCategoryApricornBalls,
	ItemCategoryApricornBox,
	ItemCategoryBadHeldItems,
	ItemCategoryBakingOnly,
	ItemCategoryChoice,
	ItemCategoryCollectibles,
	ItemCategoryDataCards,
	ItemCategoryDexCompletion,
	ItemCategoryEffortDrop,
	ItemCategoryEffortTraining,
	ItemCategoryEventItems,
	ItemCategoryEvolution,
	ItemCategoryFlutes,
	ItemCategoryGameplay,
	ItemCategoryHealing,
	ItemCategoryHeldItems,
	ItemCategoryInAPinch,
	ItemCategoryJewels,
	ItemCategoryLoot,
	ItemCategoryMedicine,
	ItemCategoryMegaStones,
	ItemCategoryMemories,
	ItemCategoryMiracleShooter,
	ItemCategoryMulch,
	ItemCategoryOther,
	ItemCategoryPickyHealing,
	ItemCategoryPlates,
	ItemCategoryPlotAdvancement,
	ItemCategoryPpRecovery,
	ItemCategoryRevival,
	ItemCategoryScarves,
	ItemCategorySpecialBalls,
	ItemCategorySpeciesSpecific,
	ItemCategorySpelunking,
	ItemCategoryStandardBalls,
	ItemCategoryStatBoosts,
	ItemCategoryStatusCures,
	ItemCategoryTraining,
	ItemCategoryTypeEnhancement,
	ItemCategoryTypeProtection,
	ItemCategoryUnused,
	ItemCategoryVitamins,
	ItemCategoryZCrystals,
}

func (e ItemCategory) IsValid() bool {
	switch e {
	case ItemCategoryAllMachines, ItemCategoryAllMail, ItemCategoryApricornBalls, ItemCategoryApricornBox, ItemCategoryBadHeldItems, ItemCategoryBakingOnly, ItemCategoryChoice, ItemCategoryCollectibles, ItemCategoryDataCards, ItemCategoryDexCompletion, ItemCategoryEffortDrop, ItemCategoryEffortTraining, ItemCategoryEventItems, ItemCategoryEvolution, ItemCategoryFlutes, ItemCategoryGameplay, ItemCategoryHealing, ItemCategoryHeldItems, ItemCategoryInAPinch, ItemCategoryJewels, ItemCategoryLoot, ItemCategoryMedicine, ItemCategoryMegaStones, ItemCategoryMemories, ItemCategoryMiracleShooter, ItemCategoryMulch, ItemCategoryOther, ItemCategoryPickyHealing, ItemCategoryPlates, ItemCategoryPlotAdvancement, ItemCategoryPpRecovery, ItemCategoryRevival, ItemCategoryScarves, ItemCategorySpecialBalls, ItemCategorySpeciesSpecific, ItemCategorySpelunking, ItemCategoryStandardBalls, ItemCategoryStatBoosts, ItemCategoryStatusCures, ItemCategoryTraining, ItemCategoryTypeEnhancement, ItemCategoryTypeProtection, ItemCategoryUnused, ItemCategoryVitamins, ItemCategoryZCrystals:
		return true
	}
	return false
}

func (e ItemCategory) String() string {
	return string(e)
}

func (e *ItemCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemCategory", str)
	}
	return nil
}

func (e ItemCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MoveLearnMethod string

const (
	MoveLearnMethodLevelUp               MoveLearnMethod = "LEVEL_UP"
	MoveLearnMethodEgg                   MoveLearnMethod = "EGG"
	MoveLearnMethodTutor                 MoveLearnMethod = "TUTOR"
	MoveLearnMethodMachine               MoveLearnMethod = "MACHINE"
	MoveLearnMethodStadiumSurfingPikachu MoveLearnMethod = "STADIUM_SURFING_PIKACHU"
	MoveLearnMethodLightBallEgg          MoveLearnMethod = "LIGHT_BALL_EGG"
	MoveLearnMethodColosseumPurification MoveLearnMethod = "COLOSSEUM_PURIFICATION"
	MoveLearnMethodXdShadow              MoveLearnMethod = "XD_SHADOW"
	MoveLearnMethodXdPurification        MoveLearnMethod = "XD_PURIFICATION"
	MoveLearnMethodFormChange            MoveLearnMethod = "FORM_CHANGE"
	MoveLearnMethodRecord                MoveLearnMethod = "RECORD"
	MoveLearnMethodTransfer              MoveLearnMethod = "TRANSFER"
)

var AllMoveLearnMethod = []MoveLearnMethod{
	MoveLearnMethodLevelUp,
	MoveLearnMethodEgg,
	MoveLearnMethodTutor,
	MoveLearnMethodMachine,
	MoveLearnMethodStadiumSurfingPikachu,
	MoveLearnMethodLightBallEgg,
	MoveLearnMethodColosseumPurification,
	MoveLearnMethodXdShadow,
	MoveLearnMethodXdPurification,
	MoveLearnMethodFormChange,
	MoveLearnMethodRecord,
	MoveLearnMethodTransfer,
}

func (e MoveLearnMethod) IsValid() bool {
	switch e {
	case MoveLearnMethodLevelUp, MoveLearnMethodEgg, MoveLearnMethodTutor, MoveLearnMethodMachine, MoveLearnMethodStadiumSurfingPikachu, MoveLearnMethodLightBallEgg, MoveLearnMethodColosseumPurification, MoveLearnMethodXdShadow, MoveLearnMethodXdPurification, MoveLearnMethodFormChange, MoveLearnMethodRecord, MoveLearnMethodTransfer:
		return true
	}
	return false
}

func (e MoveLearnMethod) String() string {
	return string(e)
}

func (e *MoveLearnMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MoveLearnMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MoveLearnMethod", str)
	}
	return nil
}

func (e MoveLearnMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MoveTarget string

const (
	MoveTargetSpecificMove           MoveTarget = "SPECIFIC_MOVE"
	MoveTargetSelectedPokemonMeFirst MoveTarget = "SELECTED_POKEMON_ME_FIRST"
	MoveTargetAlly                   MoveTarget = "ALLY"
	MoveTargetUsersField             MoveTarget = "USERS_FIELD"
	MoveTargetUserOrAlly             MoveTarget = "USER_OR_ALLY"
	MoveTargetOpponentsField         MoveTarget = "OPPONENTS_FIELD"
	MoveTargetUser                   MoveTarget = "USER"
	MoveTargetRandomOpponent         MoveTarget = "RANDOM_OPPONENT"
	MoveTargetAllOtherPokemon        MoveTarget = "ALL_OTHER_POKEMON"
	MoveTargetSelectedPokemon        MoveTarget = "SELECTED_POKEMON"
	MoveTargetAllOpponents           MoveTarget = "ALL_OPPONENTS"
	MoveTargetEntireField            MoveTarget = "ENTIRE_FIELD"
	MoveTargetUserAndAllies          MoveTarget = "USER_AND_ALLIES"
	MoveTargetAllPokemon             MoveTarget = "ALL_POKEMON"
	MoveTargetAllAllies              MoveTarget = "ALL_ALLIES"
)

var AllMoveTarget = []MoveTarget{
	MoveTargetSpecificMove,
	MoveTargetSelectedPokemonMeFirst,
	MoveTargetAlly,
	MoveTargetUsersField,
	MoveTargetUserOrAlly,
	MoveTargetOpponentsField,
	MoveTargetUser,
	MoveTargetRandomOpponent,
	MoveTargetAllOtherPokemon,
	MoveTargetSelectedPokemon,
	MoveTargetAllOpponents,
	MoveTargetEntireField,
	MoveTargetUserAndAllies,
	MoveTargetAllPokemon,
	MoveTargetAllAllies,
}

func (e MoveTarget) IsValid() bool {
	switch e {
	case MoveTargetSpecificMove, MoveTargetSelectedPokemonMeFirst, MoveTargetAlly, MoveTargetUsersField, MoveTargetUserOrAlly, MoveTargetOpponentsField, MoveTargetUser, MoveTargetRandomOpponent, MoveTargetAllOtherPokemon, MoveTargetSelectedPokemon, MoveTargetAllOpponents, MoveTargetEntireField, MoveTargetUserAndAllies, MoveTargetAllPokemon, MoveTargetAllAllies:
		return true
	}
	return false
}

func (e MoveTarget) String() string {
	return string(e)
}

func (e *MoveTarget) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MoveTarget(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MoveTarget", str)
	}
	return nil
}

func (e MoveTarget) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Shape string

const (
	ShapeBall      Shape = "BALL"
	ShapeSquiggle  Shape = "SQUIGGLE"
	ShapeFish      Shape = "FISH"
	ShapeArms      Shape = "ARMS"
	ShapeBlob      Shape = "BLOB"
	ShapeUpright   Shape = "UPRIGHT"
	ShapeLegs      Shape = "LEGS"
	ShapeQuadruped Shape = "QUADRUPED"
	ShapeWings     Shape = "WINGS"
	ShapeTentacles Shape = "TENTACLES"
	ShapeHeads     Shape = "HEADS"
	ShapeHumanoid  Shape = "HUMANOID"
	ShapeBugWings  Shape = "BUG_WINGS"
	ShapeArmor     Shape = "ARMOR"
)

var AllShape = []Shape{
	ShapeBall,
	ShapeSquiggle,
	ShapeFish,
	ShapeArms,
	ShapeBlob,
	ShapeUpright,
	ShapeLegs,
	ShapeQuadruped,
	ShapeWings,
	ShapeTentacles,
	ShapeHeads,
	ShapeHumanoid,
	ShapeBugWings,
	ShapeArmor,
}

func (e Shape) IsValid() bool {
	switch e {
	case ShapeBall, ShapeSquiggle, ShapeFish, ShapeArms, ShapeBlob, ShapeUpright, ShapeLegs, ShapeQuadruped, ShapeWings, ShapeTentacles, ShapeHeads, ShapeHumanoid, ShapeBugWings, ShapeArmor:
		return true
	}
	return false
}

func (e Shape) String() string {
	return string(e)
}

func (e *Shape) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Shape(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Shape", str)
	}
	return nil
}

func (e Shape) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TimeOfDay string

const (
	TimeOfDayDay   TimeOfDay = "DAY"
	TimeOfDayNight TimeOfDay = "NIGHT"
	TimeOfDayAny   TimeOfDay = "ANY"
)

var AllTimeOfDay = []TimeOfDay{
	TimeOfDayDay,
	TimeOfDayNight,
	TimeOfDayAny,
}

func (e TimeOfDay) IsValid() bool {
	switch e {
	case TimeOfDayDay, TimeOfDayNight, TimeOfDayAny:
		return true
	}
	return false
}

func (e TimeOfDay) String() string {
	return string(e)
}

func (e *TimeOfDay) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimeOfDay(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimeOfDay", str)
	}
	return nil
}

func (e TimeOfDay) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
